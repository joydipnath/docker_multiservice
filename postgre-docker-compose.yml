version: '3.8'
services:
  db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=docker_database
    ports:
      - '5432:5432'
    volumes: # optional
      - db:/var/lib/postgresql/data
volumes: #optional
  db:
    driver: local

# https://geshan.com.np/blog/2021/12/docker-postgres/

#  To run the composer
#  docker-compose -f C:\Users\JoydipNath(RAPP)\Downloads\postgre-docker-compose.yml up

# docker exec -it downloads-db-1 postgres -p

#### 1. ### docker run --name postgres --rm -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e PGDATA=/var/lib/postgresql/data/pgdata -v /tmp:/var/lib/postgresql/data -p 5432:5432 -it postgres:latest
#### 2. ### docker exec -it postgres /bin/sh

# then
#### 3. ### psql --username postgres

#import a file
# create database database_name
# \c database_name
# \i 'C:\\Users\\JoydipNath(RAPP)\\Downloads\\init.sql'
# \i 'C:\Users\JoydipNath(RAPP)\Downloads\init.sql'
# \i C:\Users\JoydipNath(RAPP)\Downloads\init.sql




####### Explanations

# It uses the docker-compose file version 3.8
# Next up, we define db as a service, each service will equate to a new docker run command
# We are asking docker-compose for the service to be an image of Postgres version 14.1 alpine which will always restart if the container stops automatically.
# Consequently we define two environment variables to send in the Postgres user and password. Keep in mind, as the database is not sent by default for the official image it will use the username as the database name.
# Subsequently we map the host/machine port 5432 with the container port 5432 as Postgres runs in that port in the container.
# After that we ask docker-compose to manage the volume in a name called db which is further added to be a local driver. So when the container is restarted the data will be available from docker managed volume. To see the contents of the volume we can run docker volume ls and inspect the volume attached to our Postgres container.